openapi: 3.1.0
info:
  title: tashdum API
  description: REST API for AI memory storage and retrieval using Upstash Redis.
  version: 1.0.0
servers:
  - url: http://loyal-lamb-40648.upstash.io:6379
    description: Custom Upstash Redis instance for GPT memory storage and retrieval

paths:
  /set/{key}:
    post:
      summary: Store AI memory in Redis
      description: Stores a key-value pair in Redis. The key is the thread ID, the value is the memory context, and the TTL (optional) is the expiration time in seconds. Raw string text should work.
      operationId: setMemory
      x-openai-isConsequential: false
      parameters:
        - name: key
          in: path
          required: true
          schema:
            type: string
          description: The key (thread ID) to store the memory under.
        - name: ttl
          in: query
          required: false
          schema:
            type: integer
          description: The expiration time for the key-value pair in seconds. If not provided, no TTL is set.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: string
                  description: The memory context to store (serialized as a string).
              required:
                - value
      responses:
        "200":
          description: Memory successfully stored
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    description: The result of the SET operation (usually "OK").
        "400":
          description: Invalid input provided
        "401":
          description: Unauthorized - Bearer token missing or invalid
        "500":
          description: Internal server error

  /get/{key}:
    get:
      summary: Retrieve AI memory from Redis
      description: Retrieves the memory context associated with the specified key (thread ID).
      operationId: getMemory
      x-openai-isConsequential: false
      parameters:
        - name: key
          in: path
          required: true
          schema:
            type: string
          description: The key (thread ID) to retrieve the memory for.
      responses:
        "200":
          description: Retrieved memory data
          content:
            application/json:
              schema:
                type: object
                properties:
                  value:
                    type: string
                    description: The memory context associated with the key (serialized as a string).
        "404":
          description: Key not found
        "401":
          description: Unauthorized - Bearer token missing or invalid
        "500":
          description: Internal server error

  /del/{key}:
    delete:
      summary: Delete AI memory from Redis
      description: Deletes the memory context associated with the specified key (thread ID).
      operationId: deleteMemory
      x-openai-isConsequential: false
      parameters:
        - name: key
          in: path
          required: true
          schema:
            type: string
          description: The key (thread ID) to delete the memory for.
      responses:
        "200":
          description: Memory successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: integer
                    description: The number of keys deleted (usually 1).
        "404":
          description: Key not found
        "401":
          description: Unauthorized - Bearer token missing or invalid
        "500":
          description: Internal server error

  /scan:
    get:
      summary: Scan Redis keys matching a pattern
      description: Iterates through keys in Redis matching a given pattern.
      operationId: scanKeys
      parameters:
        - name: pattern
          in: query
          required: false
          schema:
            type: string
          description: Glob-style pattern (e.g. '*memory*')
        - name: count
          in: query
          required: false
          schema:
            type: integer
          description: Number of keys to return per scan iteration.
        - name: cursor
          in: query
          required: false
          schema:
            type: string
          description: Cursor from previous scan; start with '0'
      responses:
        "200":
          description: List of keys and new cursor
          content:
            application/json:
              schema:
                type: object
                properties:
                  cursor:
                    type: string
                  keys:
                    type: array
                    items:
                      type: string

  /stream/{key}/add:
    post:
      summary: Add entry to a Redis Stream
      description: Appends a new entry to the specified Redis stream.
      operationId: addStreamEntry
      parameters:
        - name: key
          in: path
          required: true
          schema:
            type: string
          description: The stream key.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fields:
                  type: object
                  additionalProperties: true
              required: [fields]
      responses:
        "200":
          description: Stream entry added
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string

  /stream/{key}:
    get:
      summary: Read entries from a Redis Stream
      description: Retrieves entries from the specified Redis stream.
      operationId: readStream
      parameters:
        - name: key
          in: path
          required: true
          schema:
            type: string
          description: The stream key.
        - name: start
          in: query
          required: false
          schema:
            type: string
          description: Start ID (default '0-0')
        - name: end
          in: query
          required: false
          schema:
            type: string
          description: End ID (default '+')
        - name: count
          in: query
          required: false
          schema:
            type: integer
          description: Max entries to return.
      responses:
        "200":
          description: Stream entries
          content:
            application/json:
              schema:
                type: object
                properties:
                  entries:
                    type: array
                    items:
                      type: object

-------

Tell me what you think about that one.